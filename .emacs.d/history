;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(evil-ex-history helm-M-x-input-history helm-occur-history minibuffer-history))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1))))
(setq helm-M-x-input-history '("magit"))
(setq helm-occur-history '(" s)" "server" "savepla"))
(setq minibuffer-history '("ini" "init"))
(setq evil-jumps-history '((7825 "/Users/kwong/git/dotemacs/.emacs.d/init.el") (7825 "/Users/kwong/git/dotemacs/.emacs.d/init.el") (1 "/Users/kwong/git/dotemacs/.emacs.d/init.el") (26 "/Users/kwong/git/dotemacs/.emacs.d/init.el") (1 "/Users/kwong/git/dotemacs/.emacs.d/init.el")))
(setq kill-ring '(#("
" 0 1 (fontified t yank-handler (evil-yank-line-handler nil t))) #("
" 0 1 (fontified t yank-handler (evil-yank-line-handler nil t))) #("(use-package alert
  :config
  (setq alert-default-style 'notifier)
  )
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-constant-face) 18 21 (fontified t) 21 28 (fontified t face font-lock-builtin-face) 28 29 (fontified t) 29 31 (fontified t) 31 70 (fontified t) 70 71 (fontified t rear-nonsticky t) 71 72 (fontified t)) #("  (defun alert-after-finish-in-background (buf str)
    (unless (get-buffer-window buf 'visible)
      (alert str :buffer buf)))
" 0 3 (fontified t yank-handler (evil-yank-line-handler nil t)) 3 8 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler nil t)) 8 9 (fontified t yank-handler (evil-yank-line-handler nil t)) 9 41 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler nil t)) 41 57 (fontified t yank-handler (evil-yank-line-handler nil t)) 57 63 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler nil t)) 63 97 (fontified t yank-handler (evil-yank-line-handler nil t)) 97 114 (fontified t yank-handler (evil-yank-line-handler nil t)) 114 121 (face font-lock-builtin-face fontified t yank-handler (evil-yank-line-handler nil t)) 121 129 (fontified t yank-handler (evil-yank-line-handler nil t))) "
(use-package alert
  :config
  (defun alert-after-finish-in-background (buf str)
    (unless (get-buffer-window buf 'visible)
      (alert str :buffer buf)))
(setq alert-default-style 'notifier))" #("(use-package dash
  :config (dash-enable-font-lock))

" 0 1 (fontified t yank-handler (evil-yank-line-handler nil t)) 1 12 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler nil t)) 12 13 (fontified t yank-handler (evil-yank-line-handler nil t)) 13 17 (face font-lock-constant-face fontified t yank-handler (evil-yank-line-handler nil t)) 17 18 (fontified t yank-handler (evil-yank-line-handler nil t)) 18 20 (fontified t yank-handler (evil-yank-line-handler nil t)) 20 27 (face font-lock-builtin-face fontified t yank-handler (evil-yank-line-handler nil t)) 27 54 (fontified t yank-handler (evil-yank-line-handler nil t))) "(defmacro def (name &rest body)
  (declare (indent 1) (debug t))
  `(defun ,name (&optional _arg)
     ,(if (stringp (car body)) (car body))
     (interactive \"p\")
,@(if (stringp (car body)) (cdr `,body) body)))" "
(use-package dash
  :config (dash-enable-font-lock))

(use-package s
  :bind (\"s-;\" . transform-symbol-at-point)
  :config
  (def transform-symbol-at-point
    (let* ((choices '((?c . s-lower-camel-case)
                      (?C . s-upper-camel-case)
                      (?_ . s-snake-case)
                      (?- . s-dashed-words)
                      (?d . s-downcase)
                      (?u . s-upcase)))
           (chars (mapcar #'car choices))
           (prompt (concat \"Transform symbol at point [\" chars \"]: \"))
           (ch (read-char-choice prompt chars))
           (fn (assoc-default ch choices))
           (symbol (thing-at-point 'symbol t))
           (bounds (bounds-of-thing-at-point 'symbol)))
      (when fn
        (delete-region (car bounds) (cdr bounds))
(insert (funcall fn symbol))))))" #("transform-symbol-at-point" 0 25 (fontified t)) "(use-package server
  :config
  (unless (server-running-p)
(server-start)))" #("(use-package saveplace
  :init (save-place-mode))
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t) 1 12 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 12 13 (yank-handler (evil-yank-line-handler nil t) fontified t) 13 22 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-constant-face) 22 23 (yank-handler (evil-yank-line-handler nil t) fontified t) 23 25 (yank-handler (evil-yank-line-handler nil t) fontified t) 25 30 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-builtin-face) 30 50 (yank-handler (evil-yank-line-handler nil t) fontified t)) "(if (not *emacs24*)
 (use-package saveplace
   :init (save-place-mode)))
"))
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
(setq comint-input-ring 'nil)
